[('Syscam - Desconsidere', '.data')
, ('Syscam - Desconsidere', '.text')
, ('Type Unconditional jump', 'jal setting')
, ('Type Logical', 'ori $s3, $zero, 1')
, ('Type Logical', 'ori $s2, $zero, 0')
, ('Type Unconditional jump', 'jal createGame')
, ('Type Unconditional jump', 'jal createGameObjects')
, ('Type Unconditional jump', 'jal setGameStateOutput')
, ('Type Unconditional jump', 'jal initgame')
, ('Type Unconditional jump', 'jal updateGameObjects')
, ('Type Unconditional jump', 'jal createGameScreen')
, ('Type Unconditional jump', 'jal getCurrentTime')
, ('Type Logical', 'ori $s6, $v0, 0')
, ('Type Unconditional jump', 'jal removeDestroyedObjects')
, ('Type Unconditional jump', 'jal processInput')
, ('Type Unconditional jump', 'jal checkBombHits')
, ('Type Unconditional jump', 'jal updateDamagedImages')
, ('Type Unconditional jump', 'jal isLevelUp')
, ('Type conditional jump', 'bne $v0, $zero, main2')
, ('Type Unconditional jump', 'jal moveShipSubmarinesDolphins')
, ('Type Unconditional jump', 'jal moveBombs')
, ('Type Unconditional jump', 'jal updateGameObjects')
, ('Type Unconditional jump', 'jal redrawScreen')
, ('Type Logical', 'ori $a0, $s6, 0')
, ('Type Memory', 'li $a1, 30')
, ('Type Unconditional jump', 'jal pauseExecution')
, ('Type Unconditional jump', 'j main1')
, ('Type Memory', 'li $t0, 10')
, ('Type conditional jump', 'beq $s3, $t0, main3')
, ('Type Memory', 'addi $s3, $s3, 1')
, ('Type Memory', 'li $t0, 5')
, ('Type r', 'div $s3, $t0')
, ('Type r', 'mfhi $t0')
, ('Type conditional jump', 'beq $t0, $zero, double_dolphin_num')
, ('Type Memory', 'addi $s0, $s0, 3')
, ('Type Unconditional jump', 'j main_continue')
, ('Type Logical', 'sll $s0, $s0, 1')
, ('Type Memory', 'addi $s1, $s0, 3')
, ('Type Unconditional jump', 'jal createGameObjects')
, ('Type Unconditional jump', 'jal setGameStateOutput')
, ('Type Unconditional jump', 'jal initgame')
, ('Type Unconditional jump', 'j updateScreen')
, ('Type Unconditional jump', 'jal setGameoverOutput')
, ('Type Unconditional jump', 'jal redrawScreen')
, ('Type Unconditional jump', 'j end_main')
, ('Type Logical', 'ori $v0, $zero, 10')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Logical', 'ori $t0, $zero, 5')
, ('Type Memory', 'la $a0, msg0')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'ori $v0, $zero, 5')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'or $s0, $v0, $zero')
, ('Type conditional jump', 'slt $t4, $t0, $s0')
, ('Type conditional jump', 'bne $t4, $zero, setting3')
, ('Type conditional jump', 'slti $t4, $s0, 1')
, ('Type conditional jump', 'bne $t4, $zero, setting3')
, ('Type Memory', 'addi $s1, $s0, 3')
, ('Type Unconditional jump', 'j setting2')
, ('Type Memory', 'la $a0, msg1')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'j setting1')
, ('Type Memory', 'la $a0, newline')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'la $a0, msg2')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'ori $v0, $zero, 5')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'ori $a0, $v0, 0')
, ('Type Unconditional jump', 'jal setRandomSeed')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, submarines')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s6, 8($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s6')
, ('Type conditional jump', 'beq $t1, $zero, end_init_submarine_loop')
, ('Type Logical', 'ori $a0, $zero, 720')
, ('Type Unconditional jump', 'jal randnum')
, ('Type Logical', 'ori $s1, $v0, 0')
, ('Type Logical', 'ori $a0, $zero, 250')
, ('Type Unconditional jump', 'jal randnum')
, ('Type Memory', 'addi $s2, $v0, 250')
, ('Type Logical', 'ori $a0, $zero, 6')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type conditional jump', 'slt $t1, $s4, $zero')
, ('Type conditional jump', 'bne $t1, $zero, set_sub_neg_image')
, ('Type Logical', 'ori $s3, $zero, 3')
, ('Type Unconditional jump', 'j quit_set_sub_image')
, ('Type Logical', 'ori $s3, $zero, 4')
, ('Type Logical', 'ori $s5, $zero, 10')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j init_submarine_loop')
, ('Type Memory', 'la $s7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s6, 4($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s6')
, ('Type conditional jump', 'beq $t1, $zero, end_init_dolphin_loop')
, ('Type Logical', 'ori $a0, $zero, 740')
, ('Type Unconditional jump', 'jal randnum')
, ('Type Logical', 'ori $s1, $v0, 0')
, ('Type Logical', 'ori $a0, $zero, 250')
, ('Type Unconditional jump', 'jal randnum')
, ('Type Memory', 'addi $s2, $v0, 250')
, ('Type Logical', 'ori $a0, $zero, 5')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type conditional jump', 'slt $t1, $s4, $zero')
, ('Type conditional jump', 'bne $t1, $zero, set_dol_neg_image')
, ('Type Logical', 'ori $s3, $zero, 8')
, ('Type Unconditional jump', 'j quit_set_dol_image')
, ('Type Logical', 'ori $s3, $zero, 9')
, ('Type Logical', 'ori $s5, $zero, 20')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j init_dolphin_loop')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Logical', 'ori $s4, $zero, 5')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Logical', 'ori $s5, $zero, 1')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'la $s7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s6, 20($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s6')
, ('Type conditional jump', 'beq $t1, $zero, end_init_simple_bomb_loop')
, ('Type Logical', 'ori $s3, $zero, -1')
, ('Type Logical', 'ori $s4, $zero, 4')
, ('Type Logical', 'ori $s5, $zero, 1')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j init_simple_bomb_loop')
, ('Type Memory', 'la $s7, bombs')
, ('Type Memory', 'addi $s7, $s7, 100')
, ('Type Logical', 'ori $s3, $zero, -1')
, ('Type Logical', 'ori $s4, $zero, 4')
, ('Type Logical', 'ori $s5, $zero, 0')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, submarines')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s1')
, ('Type conditional jump', 'beq $t1, $zero, end_rm_destroyed_submarine_loop')
, ('Type Memory', 'lw $s5, 16($s7)')
, ('Type conditional jump', 'beq $s5, $zero, erase_submarine')
, ('Type Unconditional jump', 'j next_rm_destroyed_submarine_loop')
, ('Type Logical', 'ori $s3, $zero, -1')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j rm_destroyed_submarine_loop')
, ('Type Memory', 'la $s7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s0')
, ('Type conditional jump', 'beq $t1, $zero, end_rm_destroyed_dolphin_loop')
, ('Type Memory', 'lw $s5, 16($s7)')
, ('Type conditional jump', 'beq $s5, $zero, erase_dolphin')
, ('Type Unconditional jump', 'j next_rm_destroyed_dolphin_loop')
, ('Type Logical', 'ori $s3, $zero, -1')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j rm_destroyed_dolphin_loop')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, bombs')
, ('Type Logical', 'ori $t4, $zero, 0')
, ('Type conditional jump', 'slt $t7, $t4, $s4')
, ('Type conditional jump', 'beq $t7, $zero, end_bomb_loop')
, ('Type Memory', 'lw $t7, 8($s7)')
, ('Type conditional jump', 'bgtz $t7, checkHit_bomb_exists')
, ('Type Unconditional jump', 'j next_bomb_loop')
, ('Type Memory', 'lw $t6, 16($s7)')
, ('Type conditional jump', 'bgtz $t6, bomb_activated')
, ('Type Unconditional jump', 'j next_bomb_loop')
, ('Type Logical', 'ori $s1, $zero, 0')
, ('Type Memory', 'la $s6, submarines')
, ('Type Logical', 'ori $t5, $zero, 0')
, ('Type Memory', 'lw $s5, 8($sp)')
, ('Type conditional jump', 'slt $t7, $t5, $s5')
, ('Type conditional jump', 'beq $t7, $zero, end_check_submarine_bomb_loop')
, ('Type Memory', 'lw $t7, 8($s6)')
, ('Type conditional jump', 'bgtz $t7, checkHits_check_submarine_hp')
, ('Type Unconditional jump', 'j next_check_submarine_bomb_loop')
, ('Type Memory', 'lw $t7, 16($s6)')
, ('Type conditional jump', 'bgtz $t7, check_hit_center')
, ('Type Unconditional jump', 'j next_check_submarine_bomb_loop')
, ('Type Memory', 'lw $a0, 0($s7)')
, ('Type Memory', 'lw $a1, 4($s7)')
, ('Type Memory', 'li $a2, 30')
, ('Type Memory', 'li $a3, 30')
, ('Type Memory', 'lw $t0, 0($s6)')
, ('Type r', 'add $t0, $t0, 35')
, ('Type Memory', 'lw $t1, 4($s6)')
, ('Type Memory', 'li $t2, 10')
, ('Type Memory', 'li $t3, 40')
, ('Type Unconditional jump', 'jal isIntersected')
, ('Type conditional jump', 'beq $v0, $zero, check_hit_other')
, ('Type Memory', 'li $s1, 1')
, ('Type Memory', 'lw $t6, 16($s6)')
, ('Type Memory', 'lw $t7, 12($sp)')
, ('Type r', 'add $t7, $t7, $t6')
, ('Type Memory', 'sw $t7, 12($sp)')
, ('Type Logical', 'ori $t7, $zero, 0')
, ('Type Memory', 'sw $t7, 16($s6)')
, ('Type Unconditional jump', 'j next_check_submarine_bomb_loop')
, ('Type Memory', 'lw $a0, 0($s7)')
, ('Type Memory', 'lw $a1, 4($s7)')
, ('Type Memory', 'li $a2, 30')
, ('Type Memory', 'li $a3, 30')
, ('Type Memory', 'lw $t0, 0($s6)')
, ('Type Memory', 'lw $t1, 4($s6)')
, ('Type Memory', 'li $t2, 80')
, ('Type Memory', 'li $t3, 40')
, ('Type Unconditional jump', 'jal isIntersected')
, ('Type conditional jump', 'beq $v0, $zero, next_check_submarine_bomb_loop')
, ('Type Memory', 'li $s1, 1')
, ('Type Memory', 'lw $t6, 16($s6)')
, ('Type Memory', 'addi $t6, $t6, -5')
, ('Type Memory', 'sw $t6, 16($s6)')
, ('Type Memory', 'lw $t7, 12($sp)')
, ('Type Memory', 'addi $t7, $t7, 5')
, ('Type Memory', 'sw $t7, 12($sp)')
, ('Type Unconditional jump', 'j next_check_submarine_bomb_loop')
, ('Type Memory', 'addi $s6, $s6, 20')
, ('Type Memory', 'addi $t5, $t5, 1')
, ('Type Unconditional jump', 'j check_submarine_bomb_loop')
, ('Type Memory', 'la $s6, dolphins')
, ('Type Logical', 'ori $t5, $zero, 0')
, ('Type Memory', 'lw $s5, 4($sp)')
, ('Type conditional jump', 'slt $t7, $t5, $s5')
, ('Type conditional jump', 'beq $t7, $zero, end_check_dolphin_bomb_loop')
, ('Type Memory', 'lw $t7, 8($s6)')
, ('Type conditional jump', 'bgtz $t7, checkHits_check_dolphin_hp')
, ('Type Unconditional jump', 'j next_check_dolphin_bomb_loop')
, ('Type Memory', 'lw $t7, 16($s6)')
, ('Type conditional jump', 'bgtz $t7, check_hit_dolphin')
, ('Type Unconditional jump', 'j next_check_dolphin_bomb_loop')
, ('Type Memory', 'lw $a0, 0($s7)')
, ('Type Memory', 'lw $a1, 4($s7)')
, ('Type Memory', 'li $a2, 30')
, ('Type Memory', 'li $a3, 30')
, ('Type Memory', 'lw $t0, 0($s6)')
, ('Type Memory', 'lw $t1, 4($s6)')
, ('Type Memory', 'li $t2, 60')
, ('Type Memory', 'li $t3, 40')
, ('Type Unconditional jump', 'jal isIntersected')
, ('Type conditional jump', 'beq $v0, $zero, next_check_dolphin_bomb_loop')
, ('Type Memory', 'li $s1, 1')
, ('Type Memory', 'lw $t6, 16($s6)')
, ('Type Memory', 'lw $t7, 12($sp)')
, ('Type r', 'sub $t7, $t7, $t6')
, ('Type Memory', 'sw $t7, 12($sp)')
, ('Type Logical', 'ori $t7, $zero, 0')
, ('Type Memory', 'sw $t7, 16($s6)')
, ('Type Unconditional jump', 'j next_check_dolphin_bomb_loop')
, ('Type Memory', 'addi $s6, $s6, 20')
, ('Type Memory', 'addi $t5, $t5, 1')
, ('Type Unconditional jump', 'j check_dolphin_bomb_loop')
, ('Type conditional jump', 'beq $s1, $zero, next_bomb_loop')
, ('Type Logical', 'ori $t7, $zero, -1')
, ('Type Memory', 'sw $t7, 8($s7)')
, ('Type Logical', 'ori $t7, $zero, 0')
, ('Type Memory', 'sw $t7, 16($s7)')
, ('Type Logical', 'ori $t7, $zero, 5')
, ('Pseudo Instrucao', 'blt $t4, $t7, charge_s_bomb')
, ('Type Unconditional jump', 'j charge_r_bomb')
, ('Type Memory', 'lw $t7, 20($sp)')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'sw $t7, 20($sp)')
, ('Type Unconditional jump', 'j end_charge_bomb')
, ('Type Memory', 'lw $t7, 24($sp)')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'sw $t7, 24($sp)')
, ('Type Unconditional jump', 'j end_charge_bomb')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t4, $t4, 1')
, ('Type Unconditional jump', 'j bomb_loop')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Unconditional jump', 'jal getInput')
, ('Type conditional jump', 'beq $v0, $zero, end_process_input')
, ('Type Logical', 'ori $t0, $zero, 113')
, ('Type conditional jump', 'beq $v0, $t0, process_q')
, ('Type Logical', 'ori $t0, $zero, 101')
, ('Type conditional jump', 'beq $v0, $t0, process_e')
, ('Type Logical', 'ori $t0, $zero, 49')
, ('Type conditional jump', 'beq $v0, $t0, process_1')
, ('Type Logical', 'ori $t0, $zero, 50')
, ('Type conditional jump', 'beq $v0, $t0, process_2')
, ('Type Logical', 'ori $t0, $zero, 106')
, ('Type conditional jump', 'beq $v0, $t0, process_j')
, ('Type Logical', 'ori $t0, $zero, 107')
, ('Type conditional jump', 'beq $v0, $t0, process_k')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Unconditional jump', 'jal print_bombs_index')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Unconditional jump', 'jal print_bombs_status')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Unconditional jump', 'jal print_dolphins_hp')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Unconditional jump', 'jal print_dolphins_index')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Unconditional jump', 'j end_main')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type conditional jump', 'bgtz $s4, drop_s_bomb')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'la $s7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t2, $zero, 5')
, ('Type conditional jump', 'slt $t1, $t0, $t2')
, ('Type conditional jump', 'beq $t1, $zero, end_drop_s_bomb_loop')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Syscam - Desconsidere', 'bltz $s3, drop_this_s_bomb')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j drop_s_bomb_loop')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'la $t0, ship')
, ('Type Memory', 'lw $s1, 0($t0)')
, ('Type Memory', 'lw $s2, 4($t0)')
, ('Type Memory', 'addi $s1, $s1, 65')
, ('Type Memory', 'addi $s2, $s2, 60')
, ('Type Logical', 'ori $s3, $zero, 11')
, ('Type Logical', 'ori $s4, $zero, 1')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 16($s7)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'addi $s4, $s4, -1')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type conditional jump', 'bgtz $s5, drop_this_r_bomb')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'la $s7, bombs')
, ('Type Memory', 'addi $s7, $s7, 100')
, ('Type Memory', 'la $t0, ship')
, ('Type Memory', 'lw $s1, 0($t0)')
, ('Type Memory', 'lw $s2, 4($t0)')
, ('Type Memory', 'addi $s1, $s1, 65')
, ('Type Memory', 'addi $s2, $s2, 60')
, ('Type Logical', 'ori $s3, $zero, 12')
, ('Type Logical', 'ori $s5, $zero, 0')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'addi $s5, $s5, -1')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'la $s7, bombs')
, ('Type Memory', 'addi $s7, $s7, 100')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, activate_r_bomb')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Logical', 'ori $s3, $zero, 13')
, ('Type Logical', 'ori $s5, $zero, 1')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s5, 16($s7)')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'la $s7, ship')
, ('Type Memory', 'lw $s1, 0($s7)')
, ('Type Memory', 'addi $s1, $s1, -4')
, ('Type Logical', 'ori $s3, $zero, 2')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j check_ship_bound_process')
, ('Type Memory', 'la $s7, ship')
, ('Type Memory', 'lw $s1, 0($s7)')
, ('Type Memory', 'addi $s1, $s1, 4')
, ('Type Logical', 'ori $s3, $zero, 1')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j check_ship_bound_process')
, ('Type Logical', 'ori $t1, $zero, 0')
, ('Type Logical', 'ori $t2, $zero, 640')
, ('Pseudo Instrucao', 'blt $s1, $t1, change_ship_speed_right')
, ('Type conditional jump', 'bgt $s1, $t2, change_ship_speed_left')
, ('Type Unconditional jump', 'j end_process_ship_move')
, ('Type Memory', 'addi $s1, $s1, -4')
, ('Type Logical', 'ori $s3, $zero, 2')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j end_process_ship_move')
, ('Type Memory', 'addi $s1, $s1, 4')
, ('Type Logical', 'ori $s3, $zero, 1')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j end_process_ship_move')
, ('Type Unconditional jump', 'j end_process_input')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, submarines')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s1')
, ('Type conditional jump', 'beq $t1, $zero, end_move_submarine_loop')
, ('Type Memory', 'lw $t7, 8($s7)')
, ('Type conditional jump', 'bgtz $t7, move_submarine_if_exists')
, ('Type Unconditional jump', 'j next_move_submarine')
, ('Type Memory', 'lw $t1, 0($s7)')
, ('Type Memory', 'lw $s4, 12($s7)')
, ('Type r', 'add $t1, $t1, $s4')
, ('Type Memory', 'sw $t1, 0($s7)')
, ('Type Logical', 'ori $t2, $zero, 0')
, ('Type Logical', 'ori $t3, $zero, 720')
, ('Pseudo Instrucao', 'blt $t1, $t2, change_submarine_speed_right')
, ('Type conditional jump', 'bgt $t1, $t3, change_submarine_speed_left')
, ('Type Unconditional jump', 'j next_move_submarine')
, ('Type Logical', 'ori $a0, $s4, 0')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type conditional jump', 'beq $a0, $s4, change_submarine_speed_left')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type Logical', 'ori $t7, $zero, 4')
, ('Type conditional jump', 'bgt $s3, $t7, change_damaged_left')
, ('Type Unconditional jump', 'j change_normal_left')
, ('Type Logical', 'ori $s3, $zero, 6')
, ('Type Unconditional jump', 'j save_change_submarine_left')
, ('Type Logical', 'ori $s3, $zero, 4')
, ('Type Unconditional jump', 'j save_change_submarine_left')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Unconditional jump', 'j next_move_submarine')
, ('Type Logical', 'ori $a0, $s4, 0')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type conditional jump', 'beq $a0, $s4, change_submarine_speed_right')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type Logical', 'ori $t7, $zero, 4')
, ('Type conditional jump', 'bgt $s3, $t7, change_damaged_right')
, ('Type Unconditional jump', 'j change_normal_right')
, ('Type Logical', 'ori $s3, $zero, 5')
, ('Type Unconditional jump', 'j save_change_submarine_right')
, ('Type Logical', 'ori $s3, $zero, 3')
, ('Type Unconditional jump', 'j save_change_submarine_right')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Unconditional jump', 'j next_move_submarine')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j move_submarine_loop')
, ('Type Memory', 'la $s7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s0')
, ('Type conditional jump', 'beq $t1, $zero, end_move_dolphin_loop')
, ('Type Memory', 'lw $t7, 8($s7)')
, ('Type conditional jump', 'bgtz $t7, move_dolphin_if_exists')
, ('Type Unconditional jump', 'j next_move_dolphin_loop')
, ('Type Memory', 'lw $s1, 0($s7)')
, ('Type Memory', 'lw $s4, 12($s7)')
, ('Type r', 'add $s1, $s1, $s4')
, ('Type Memory', 'sw $s1, 0($s7)')
, ('Type Logical', 'ori $t1, $zero, 0')
, ('Type Logical', 'ori $t2, $zero, 740')
, ('Pseudo Instrucao', 'blt $s1, $t1, change_dolphin_speed_right')
, ('Type conditional jump', 'bgt $s1, $t2, change_dolphin_speed_left')
, ('Type Unconditional jump', 'j next_move_dolphin_loop')
, ('Type Logical', 'ori $a0, $s4, 0')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type conditional jump', 'beq $a0, $s4, change_dolphin_speed_left')
, ('Type Logical', 'ori $s3, $zero, 9')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Unconditional jump', 'j next_move_dolphin_loop')
, ('Type Logical', 'ori $a0, $s4, 0')
, ('Type Unconditional jump', 'jal randomSignChange')
, ('Type conditional jump', 'beq $a0, $s4, change_dolphin_speed_right')
, ('Type Logical', 'ori $s3, $zero, 8')
, ('Type Logical', 'ori $s4, $a0, 0')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Memory', 'sw $s4, 12($s7)')
, ('Type Unconditional jump', 'j next_move_dolphin_loop')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j move_dolphin_loop')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t2, $zero, 5')
, ('Type conditional jump', 'slt $t1, $t0, $t2')
, ('Type conditional jump', 'beq $t1, $zero, end_move_s_bomb_loop')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, move_s_bomb')
, ('Type Unconditional jump', 'j next_move_s_bomb')
, ('Type Memory', 'lw $t4, 12($s7)')
, ('Type Memory', 'lw $s2, 4($s7)')
, ('Type r', 'add $s2, $s2, $t4')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Unconditional jump', 'j next_move_s_bomb')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j move_s_bomb_loop')
, ('Type Memory', 'la $s7, bombs')
, ('Type Memory', 'addi $s7, $s7, 100')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, move_r_bomb')
, ('Type Unconditional jump', 'j end_move_r_bomb')
, ('Type Memory', 'lw $t4, 12($s7)')
, ('Type Memory', 'lw $s2, 4($s7)')
, ('Type r', 'add $s2, $s2, $t4')
, ('Type Memory', 'sw $s2, 4($s7)')
, ('Type Memory', 'la $s7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t7, $zero, 6')
, ('Type conditional jump', 'slt $t1, $t0, $t7')
, ('Type conditional jump', 'beq $t1, $zero, end_check_bomb_bound_loop')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, check_bomb_out_bound')
, ('Type Unconditional jump', 'j next_check_bomb_bound')
, ('Type Memory', 'lw $s2, 4($s7)')
, ('Type Logical', 'ori $t1, $zero, 570')
, ('Type conditional jump', 'bgt $s2, $t1, rm_bomb')
, ('Type Unconditional jump', 'j next_check_bomb_bound')
, ('Type Logical', 'ori $s3, $zero, -1')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Logical', 'ori $t4, $zero, 5')
, ('Pseudo Instrucao', 'blt $t0, $t4, rm_s_bomb')
, ('Type Unconditional jump', 'j rm_r_bomb')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'addi $s4, $s4, 1')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Unconditional jump', 'j end_rm_bomb')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'addi $s5, $s5, 1')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Unconditional jump', 'j end_rm_bomb')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j check_bomb_bound_loop')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -36')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s4, 20($sp)')
, ('Type Memory', 'sw $s5, 24($sp)')
, ('Type Memory', 'sw $s6, 28($sp)')
, ('Type Memory', 'sw $s7, 32($sp)')
, ('Type Memory', 'la $s7, submarines')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s1')
, ('Type conditional jump', 'beq $t1, $zero, end_update_submarine_loop')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, update_submarine_loop_check_hp')
, ('Type Unconditional jump', 'j next_update_submarine')
, ('Type Memory', 'lw $s5, 16($s7)')
, ('Type conditional jump', 'beq $s5, $zero, update_destroyed_submarine')
, ('Type Logical', 'ori $t1, $zero, 5')
, ('Type conditional jump', 'beq $s5, $t1, update_damaged_submarine')
, ('Type Unconditional jump', 'j next_update_submarine')
, ('Type Logical', 'ori $s3, $zero, 7')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j next_update_submarine')
, ('Type Memory', 'lw $s4, 12($s7)')
, ('Type conditional jump', 'slt $t1, $s4, $zero')
, ('Type conditional jump', 'bne $t1, $zero, update_damaged_submarine_left')
, ('Type Unconditional jump', 'j update_damaged_submarine_right')
, ('Type Logical', 'ori $s3, $zero, 6')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j next_update_submarine')
, ('Type Logical', 'ori $s3, $zero, 5')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j next_update_submarine')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j update_submarine_loop')
, ('Type Memory', 'la $s7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type conditional jump', 'slt $t1, $t0, $s0')
, ('Type conditional jump', 'beq $t1, $zero, end_update_dolphin_loop')
, ('Type Memory', 'lw $s3, 8($s7)')
, ('Type conditional jump', 'bgtz $s3, update_dolphin_loop_check_hp')
, ('Type Unconditional jump', 'j next_update_dolphin')
, ('Type Memory', 'lw $s5, 16($s7)')
, ('Type conditional jump', 'beq $s5, $zero, update_destroyed_dolphin')
, ('Type Unconditional jump', 'j next_update_dolphin')
, ('Type Logical', 'ori $s3, $zero, 10')
, ('Type Memory', 'sw $s3, 8($s7)')
, ('Type Unconditional jump', 'j next_update_dolphin')
, ('Type Memory', 'addi $s7, $s7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j update_dolphin_loop')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s4, 20($sp)')
, ('Type Memory', 'lw $s5, 24($sp)')
, ('Type Memory', 'lw $s6, 28($sp)')
, ('Type Memory', 'lw $s7, 32($sp)')
, ('Type Memory', 'addi $sp, $sp, 36')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Logical', 'ori $v0, $zero, 1')
, ('Type Memory', 'la $t6, submarines')
, ('Type Memory', 'li $t7, 0')
, ('Type Memory', 'lw $t5, 8($t6)')
, ('Type conditional jump', 'slti $t5, $t5, 0')
, ('Type conditional jump', 'bne $t5, $zero, level_submarine_loop_continue')
, ('Type Logical', 'ori $v0, $zero, 0')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'addi $t6, $t6, 20')
, ('Type conditional jump', 'bne $t7, $s1, level_submarine_loop')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -24')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'sw $s0, 4($sp)')
, ('Type Memory', 'sw $s1, 8($sp)')
, ('Type Memory', 'sw $s2, 12($sp)')
, ('Type Memory', 'sw $s3, 16($sp)')
, ('Type Memory', 'sw $s7, 20($sp)')
, ('Type r', 'add $s0, $a0, $a2')
, ('Type Memory', 'addi $s0, $s0, -1')
, ('Type r', 'add $s1, $a1, $a3')
, ('Type Memory', 'addi $s1, $s1, -1')
, ('Type r', 'add $s2, $t0, $t2')
, ('Type Memory', 'addi $s2, $s2, -1')
, ('Type r', 'add $s3, $t1, $t3')
, ('Type Memory', 'addi $s3, $s3, -1')
, ('Type Memory', 'li $v0, 1')
, ('Type conditional jump', 'slt $s7, $s0, $t0')
, ('Type conditional jump', 'bne $s7, $zero, no_intersect')
, ('Type conditional jump', 'slt $s7, $s2, $a0')
, ('Type conditional jump', 'bne $s7, $zero, no_intersect')
, ('Type conditional jump', 'slt $s7, $s1, $t1')
, ('Type conditional jump', 'bne $s7, $zero, no_intersect')
, ('Type conditional jump', 'slt $s7, $s3, $a1')
, ('Type conditional jump', 'bne $s7, $zero, no_intersect')
, ('Type Unconditional jump', 'j check_intersect_end')
, ('Type Memory', 'li $v0, 0')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'lw $s0, 4($sp)')
, ('Type Memory', 'lw $s1, 8($sp)')
, ('Type Memory', 'lw $s2, 12($sp)')
, ('Type Memory', 'lw $s3, 16($sp)')
, ('Type Memory', 'lw $s7, 20($sp)')
, ('Type Memory', 'addi $sp, $sp, 24')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a0, 14')
, ('Type Memory', 'li $a1, 0')
, ('Type Logical', 'ori $a2, $s2, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 1')
, ('Type Logical', 'ori $a2, $s3, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 2')
, ('Type Logical', 'ori $a2, $s4, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 3')
, ('Type Logical', 'ori $a2, $s5, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 4')
, ('Type Memory', 'la $t0, ship')
, ('Type Memory', 'lw $a2, 0($t0)')
, ('Type Memory', 'lw $a3, 4($t0)')
, ('Type Memory', 'li $a0, 12')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 11')
, ('Type Memory', 'lw $a2, 8($t0)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 5')
, ('Type Memory', 'la $t6, submarines')
, ('Type Memory', 'li $t7, 0')
, ('Type Memory', 'lw $a2, ($t6)')
, ('Type Memory', 'lw $a3, 4($t6)')
, ('Type Memory', 'li $a0, 12')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 11')
, ('Type Memory', 'lw $a2, 8($t6)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $a1, $a1, 1')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'addi $t6, $t6, 20')
, ('Type conditional jump', 'bne $t7, $s1, draw_submarine_loop')
, ('Type Memory', 'la $t6, dolphins')
, ('Type Memory', 'li $t7, 0')
, ('Type Memory', 'lw $a2, ($t6)')
, ('Type Memory', 'lw $a3, 4($t6)')
, ('Type Memory', 'li $a0, 12')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 11')
, ('Type Memory', 'lw $a2, 8($t6)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $a1, $a1, 1')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'addi $t6, $t6, 20')
, ('Type conditional jump', 'bne $t7, $s0, draw_dolphin_loop')
, ('Type Memory', 'la $t6, bombs')
, ('Type Memory', 'li $s7, 6')
, ('Type Memory', 'li $t7, 0')
, ('Type Memory', 'lw $a2, ($t6)')
, ('Type Memory', 'lw $a3, 4($t6)')
, ('Type Memory', 'li $a0, 12')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 11')
, ('Type Memory', 'lw $a2, 8($t6)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $a1, $a1, 1')
, ('Type Memory', 'addi $t7, $t7, 1')
, ('Type Memory', 'addi $t6, $t6, 20')
, ('Type conditional jump', 'bne $t7, $s7, draw_bomb_loop')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $v0, $zero, 0')
, ('Type Memory', 'lui $a0, 0xffff')
, ('Type Memory', 'lw $a1, 0($a0)')
, ('Type Logical', 'andi $a1,$a1,1')
, ('Type conditional jump', 'beq $a1, $zero, noInput')
, ('Type Memory', 'lw $v0, 4($a0)')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $a0, 0($sp)')
, ('Type Memory', 'li $a0, 2')
, ('Type Unconditional jump', 'jal randnum')
, ('Type Memory', 'lw $a0, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type conditional jump', 'beq $v0, $zero, no_sign_change')
, ('Type Memory', 'li $a1, -1')
, ('Type r', 'mult $a1, $a0')
, ('Syscam - Desconsidere', 'mflo $a0')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Logical', 'ori $a1, $a0, 0')
, ('Type Memory', 'li $v0, 40')
, ('Type Memory', 'li $a0, 1')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 42')
, ('Type Logical', 'ori $a1, $a0, 0')
, ('Type Memory', 'li $a0, 1')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'ori $v0, $a0, 0')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a1, 0')
, ('Type Memory', 'li $a0, 12')
, ('Type Memory', 'li $a2, 154')
, ('Type Memory', 'li $a3, 35')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 16')
, ('Type Memory', 'li $a2, 20')
, ('Type Memory', 'li $a3, 0')
, ('Type Memory', 'li $t0, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 15')
, ('Type Memory', 'li $a2, 0x00404040')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 1')
, ('Type Memory', 'li $a0, 12')
, ('Type Memory', 'li $a2, 154')
, ('Type Memory', 'li $a3, 69')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 16')
, ('Type Memory', 'li $a2, 20')
, ('Type Memory', 'li $a3, 0')
, ('Type Memory', 'li $t0, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 15')
, ('Type Memory', 'li $a2, 0x00404040')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 2')
, ('Type Memory', 'li $a0, 12')
, ('Type Memory', 'li $a2, 487')
, ('Type Memory', 'li $a3, 45')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 16')
, ('Type Memory', 'li $a2, 26')
, ('Type Memory', 'li $a3, 0')
, ('Type Memory', 'li $t0, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 15')
, ('Type Memory', 'li $a2, 0x00ff00ff')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a1, 3')
, ('Type Memory', 'li $a0, 12')
, ('Type Memory', 'li $a2, 638')
, ('Type Memory', 'li $a3, 45')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 16')
, ('Type Memory', 'li $a2, 26')
, ('Type Memory', 'li $a3, 0')
, ('Type Memory', 'li $t0, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 15')
, ('Type Memory', 'li $a2, 0x00ff00ff')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'addi $a1, $s0, 11')
, ('Type r', 'add $a1, $a1, $s1')
, ('Type Memory', 'li $a0, 13')
, ('Type Memory', 'la $a2, msg3')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 12')
, ('Type Memory', 'li $a2, 100')
, ('Type Memory', 'li $a3, 250')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 16')
, ('Type Memory', 'li $a2, 80')
, ('Type Memory', 'li $a3, 1')
, ('Type Memory', 'li $t0, 1')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 15')
, ('Type Memory', 'li $a2, 0x00ffff00')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a0, 1')
, ('Type Memory', 'li $a1, 800')
, ('Type Memory', 'li $a2, 600')
, ('Type Memory', 'la $a3, title')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 3')
, ('Type Memory', 'la $a1, images')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'li $a0, 5')
, ('Type Memory', 'li $a1, 0')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a0, 2')
, ('Type Memory', 'addi $a1, $zero, 4')
, ('Type Memory', 'addi $a1, $a1, 1')
, ('Type r', 'add $a1, $a1, $s1')
, ('Type r', 'add $a1, $a1, $s0')
, ('Type Memory', 'addi $a1, $a1, 6')
, ('Type Memory', 'addi $a1, $a1, 1')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a0, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 100')
, ('Type Memory', 'li $a0, 6')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'li $v0, 30')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Logical', 'andi $v0, $a0, 0x3fffffff')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type r', 'add $a3, $a0, $a1')
, ('Type Unconditional jump', 'jal getCurrentTime')
, ('Type r', 'sub $a0, $a3, $v0')
, ('Type conditional jump', 'slt $a3, $zero, $a0')
, ('Type conditional jump', 'bne $a3, $zero, positive_pause_time')
, ('Type Memory', 'li $a0, 1')
, ('Type Memory', 'li $v0, 32')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -16')
, ('Type Memory', 'sw $t0, 0($sp)')
, ('Type Memory', 'sw $t6, 4($sp)')
, ('Type Memory', 'sw $t7, 8($sp)')
, ('Type Memory', 'sw $ra, 12($sp)')
, ('Type Memory', 'la $t7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t6, $zero, 5')
, ('Type conditional jump', 'bgt $t0, $t6, end_print_bomb_index_loop')
, ('Type Memory', 'li $v0, 1')
, ('Type Memory', 'lw $a0, 8($t7)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'la $a0, space')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $t7, $t7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j print_bomb_index_loop')
, ('Type Unconditional jump', 'jal print_new_line')
, ('Type Memory', 'lw $t0, 0($sp)')
, ('Type Memory', 'lw $t6, 4($sp)')
, ('Type Memory', 'lw $t7, 8($sp)')
, ('Type Memory', 'lw $ra, 12($sp)')
, ('Type Memory', 'addi $sp, $sp, 16')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -16')
, ('Type Memory', 'sw $t0, 0($sp)')
, ('Type Memory', 'sw $t6, 4($sp)')
, ('Type Memory', 'sw $t7, 8($sp)')
, ('Type Memory', 'sw $ra, 12($sp)')
, ('Type Memory', 'la $t7, bombs')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t6, $zero, 5')
, ('Type conditional jump', 'bgt $t0, $t6, end_print_bomb_status_loop')
, ('Type Memory', 'li $v0, 1')
, ('Type Memory', 'lw $a0, 16($t7)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'la $a0, space')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $t7, $t7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j print_bomb_status_loop')
, ('Type Unconditional jump', 'jal print_new_line')
, ('Type Memory', 'lw $t0, 0($sp)')
, ('Type Memory', 'lw $t6, 4($sp)')
, ('Type Memory', 'lw $t7, 8($sp)')
, ('Type Memory', 'lw $ra, 12($sp)')
, ('Type Memory', 'addi $sp, $sp, 16')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -16')
, ('Type Memory', 'sw $t0, 0($sp)')
, ('Type Memory', 'sw $t6, 4($sp)')
, ('Type Memory', 'sw $t7, 8($sp)')
, ('Type Memory', 'sw $ra, 12($sp)')
, ('Type Memory', 'la $t7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t6, $zero, 7')
, ('Type conditional jump', 'bgt $t0, $t6, end_print_dolphin_index_loop')
, ('Type Memory', 'li $v0, 1')
, ('Type Memory', 'lw $a0, 8($t7)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'la $a0, space')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $t7, $t7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j print_dolphin_index_loop')
, ('Type Unconditional jump', 'jal print_new_line')
, ('Type Memory', 'lw $t0, 0($sp)')
, ('Type Memory', 'lw $t6, 4($sp)')
, ('Type Memory', 'lw $t7, 8($sp)')
, ('Type Memory', 'lw $ra, 12($sp)')
, ('Type Memory', 'addi $sp, $sp, 16')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -16')
, ('Type Memory', 'sw $t0, 0($sp)')
, ('Type Memory', 'sw $t6, 4($sp)')
, ('Type Memory', 'sw $t7, 8($sp)')
, ('Type Memory', 'sw $ra, 12($sp)')
, ('Type Memory', 'la $t7, dolphins')
, ('Type Logical', 'ori $t0, $zero, 0')
, ('Type Logical', 'ori $t6, $zero, 7')
, ('Type conditional jump', 'bgt $t0, $t6, end_print_dolphin_hp_loop')
, ('Type Memory', 'li $v0, 1')
, ('Type Memory', 'lw $a0, 16($t7)')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'la $a0, space')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'addi $t7, $t7, 20')
, ('Type Memory', 'addi $t0, $t0, 1')
, ('Type Unconditional jump', 'j print_dolphin_hp_loop')
, ('Type Unconditional jump', 'jal print_new_line')
, ('Type Memory', 'lw $t0, 0($sp)')
, ('Type Memory', 'lw $t6, 4($sp)')
, ('Type Memory', 'lw $t7, 8($sp)')
, ('Type Memory', 'lw $ra, 12($sp)')
, ('Type Memory', 'addi $sp, $sp, 16')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'la $a0, intersectMsg')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Unconditional jump', 'jal print_new_line')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type Unconditional jump', 'jr $ra')
, ('Type Memory', 'addi $sp, $sp, -4')
, ('Type Memory', 'sw $ra, 0($sp)')
, ('Type Memory', 'la $a0, newline')
, ('Type Logical', 'ori $v0, $zero, 4')
, ('Syscam - Desconsidere', 'syscall')
, ('Type Memory', 'lw $ra, 0($sp)')
, ('Type Memory', 'addi $sp, $sp, 4')
, ('Type Unconditional jump', 'jr $ra')
]
