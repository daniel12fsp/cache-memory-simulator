.data
vetor:	.word -5182 2143 2278 7911 3947 -8393 -624 2658 -6978 6623 -9938 -5052 9228 5409 9875 8516 2070 -6873 3159 -9500 -3830 7277 -2168 8645 -2631 -5916 -5678 -7322 -6905 -5777 8046 -8531 -3424 9789 -3056 8532 -7534 -8618 8855 -2785 -8510 7829 9103 4791 6952 390 9117 -1393 -6011 5011 -5068 8221 -3823 -1173 6522 -2705 860 7658 2112 -4066 172 2334 5216 -6306 7936 8006 -4610 -703 -9420 -2552 4362 7073 1053 8496 4542 -2062 9528 8229 -7100 634 516 -3638 9744 -3011 1868 4905 -3306 8953 3640 -6639 4877 -9576 2829 5665 -2374 -1947 3798 -7947 -7605 -764 3648 -9492 -1073 -3290 5391 1721 3123 8255 6296 2657 8045 2099 6870 6170 8149 9720 -5976 1074 -9608 -1353 -1248 -5011 9130 8381 9380 -3731 8047 4413 9989 4507 -3636 478 -7453 9403 1865 7774 4388 8083 -2934 5265 -1611 -5830 -7651 -4252 5792 -8786 -1936 -2443 -188 -7008 -6352 -1897 7861 9234 -7271 3460 -2863 -2836 371 364 8104 5383 9701 -5413 9779 6859 6640 2631 -42 -8933 -4738 -717 526 9983 -13 8572 234 -6338 4746 -5676 -7410 5031 1226 4184 1987 2199 -203 6352 -2239 -6529 -2459 -5260 -7008 4719 4878 8214 444 -7047 -6415 -7968 -7036 3803 -9285 9561 5731 -2349 -1300 9226 4254 -9950 -5802 9948 -9215 -7150 5168 -4935 -6169 -9400 -1392 -6018 -4868 -8640 -8031 9513 9905 -8013 -2729 -944 6472 8404 -2752 9415 2956 8391 -2678 9919 8969 -1121 -7921 -3941 -4813 3425 5668 -6099 268 -7691 -5552 9425 7793 -2665 -3194 -3704 -6685 1311 492 -7533 9977 -7967 -5444 -931 -5590 2158 -7012 -8707 -3510 -1577 9995 -3331 775 5227 -2814 -6597 8225 -8679 3967 7299 -3313 -5697 5269 917 -7904 9876 -4436 7770 7557 1991 9274 1649 -7793 -9844 4333 -4229 3424 -6009 3160 7348 4952 -2787 2247 -5744 -8259 2385 8204 -997 8818 7566 -1309 9724 7250 2862 -7611 -955 3319 690 -5717 -8480 8988 4085 -9368 6176 -9626 5720 9295 -824 -6581 -4986 5647 -2698 2236 -2048 1663 1834 4474 8776 3148 7956 3489 -3442 -9483 2033 5258 4297 -4057 40 -5466 9315 4443 -3637 1670 5269 -7432 6624 -3531 4436 -5450 3628 7175 -3744 6732 -8647 -5867 9228 -4808 5120 -4893 -1086 996 4789 -4369 -417 -2884 -9586 -6203 364 -7606 9735 3178 7416 56 -8127 -1085 -6664 -272 -5893 7721 -3624 -3811 -9767 5252 5092 9335 2474 -44 7413 5548 -8815 -9628 -2312 -5187 3428 -5246 -4863 -7828 4641 860 -2221 -7687 -3030 3289 6121 9799 2990 3478 760 -8252 5269 -9474 2240 2527 -5188 9596 3710 2009 5578 -5238 -8200 -8146 -1233 -4401 -5085 -2236 -4417 -9288 3913 -8539 -2928 7107 -9017 -8843 -4887 1575 -5056 -6190 4121 -1748 7853 -8797 -4553 3494 -6336 -2928 2813 -7984 9172 3276 -7550 4533 -5475 2249 9259 -854 5820 -1087 -7636 6844 -3929 -4601 -3043 9769 8922 3735 -2516 -6142 4709 5882 -2346 2772 8844 -7222 4533 5502 9211 1478 849 -4729 -7137 4938 3182 2761 -4525 -2004 1721 -1583 7759 2307 -3176 -5440 3588 -2898 8788 4036 2696 4820 4026 -3286 -7404 1773 -7267 -3922 1136 -7333 -4167 -9394 9757 -1196 9685 -8669 -3942 2283 -8812 -1893 -2567 5039 5533 5409 -3681 -800 3571 -579 1462 3124 -5217 -7808 -9399 -2044 3834 7115 -849 -8078 -5782 -6619 3936 -2833 5460 -943 -3101 -4458 7173 -4582 -9238 1269 6983 4818 4552 -8171 6708 7935 9898 -7813 6878 7786 5631 3249 5368 388 4825 -6246 8355 4885 8456 -9360 2176 -4637 -6186 8168 1957 3180 351 -2162 7846 -8693 -3856 9259 4962 -8829 3538 2721 -6875 4137 9960 -7941 -5741 -3994 -890 6300 2076 8180 -207 5224 -7690 7714 -2909 8418 -2839 8318 5044 7612 -252 851 -1514 3094 4062 -435 9877 7144 -2519 9850 -1995 7985 -71 -7832 748 -3549 9434 -9573 7591 5605 4153 -7754 -5084 -685 -7549 -3419 2881 8271 4663 -4047 -7330 -3978 -5937 3177 4551 8615 -5701 -2835 -7077 2573 8601 -3715 -5402 -1549 -6809 4019 -4373 3081 7042 -2794 1486 -2183 5174 -3312 -4739 -1134 -6973 -7951 9633 -5552 8694 -5425 -1997 8606 9615 -2254 -2944 7004 -786 6242 -974 -6409 6339 -5868 8441 3174 -4737 4079 -5682 951 -1098 126 8415 -4553 4839 9369 8225 4651 1880 4673 4800 -8580 4523 -2812 -474 -6579 -6516 -3377 8023 500 5457 -94 -3868 -9493 5728 1615 -6251 9230 6671 -1995 -9830 -5173 2764 7077 -8085 4850 8090 4147 -4324 2069 8418 -7652 842 5034 -2581 9636 -3743 2157 -6013 -3845 -7367 6716 3325 820 3790 -7501 -5354 4772 -8539 -268 -829 -5103 5339 5720 -8462 -9462 -458 2156 493 9747 1510 -3956 8275 7502 3434 4799 -6310 474 -5301 -3095 78 -5044 6830 -9863 6791 -8348 2499 288 9524 -2855 -9842 -557 -3686 -6624 -7405 1931 6839 1206 5988 1769 -4255 3314 5033 6095 8109 340 -7534 -4694 -9496 -996 2517 5181 -4960 3028 649 -9507 -3604 7299 -9651 -2012 -9309 -8613 9149 3927 2759 -5724 8801 5338 -4880 -915 7853 6013 2372 -9865 -8163 1769 7965 8349 7942 4953 -35 6329 8771 -6583 -2723 -8058 4472 3305 2535 -8217 -8907 -1125 -8239 2852 7507 -5539 6982 255 -5767 480 -4581 -8097 -9756 247 -2191 -5101 -3229 3177 -324 -3222 8997 8578 2462 5559 -4634 4444 9766 -2063 -2989 8489 -4888 4862 -9352 970 -7769 3525 8367 -3491 9632 7624 391 -1503 -6046 -1955 -825 -7831 9911 1636 8756 4221 5022 -390 5619 1890 -4044 -6038 7325 -3997 -2264 -5427 6772 -6246 5882 4037 -8922 -5732 827 536 6662 7423 7493 -4660 2472 -9653 9603 -8407 -3776 -35 -3753 1992 5696 -1897 -5559 -5563 -3144 2268 4846 3649 -9080 -7004 2997 -5711 3904 -2582 6992 3190 -1042 1407 -2457 -7252 159 7886 6484 -3809 -5948 -4529 1266 -2483 6733 -6387 2836 -3335 3023 9757 977 -8348 7040 -810 -8168 5191 -1021 -7405 -4011 9173 4860 -6324 -820 129 -1456 744 7971 -7873 -3594 3487 8387 5902 1871 -2860 631 -7960 -5360 -1820 200 -1266 -3371 -2599 -2104 922 8953 -1548 -7668 3181 -9110 -5395 3173 6195 -4711 -879 9160 1499 -3648 -2401 -573 # Usado como vetor de inteiro de 10 posições

.text

main:
	addi $t0, $zero, 1000
	addi $t6, $zero, 1 # Configura o contador $t6 para 1 [i]
	la $t3,vetor # Recupera o endereço do vetor...
	
	addi $t3, $t3, 4 # ...e soma uma posição

condfor:
	slt $t5, ,$t6, $t0 # Enquanto o contador $t6 for menor que o tamanho ele executa as instruções
	beq $t5, $zero, fimfor # for(;$t6<$t0;) [for(;i<tam;)]

instrufor:
	lw $s0,($t3) # Carrega Vetor na posição $t6 [Pivot]
	move $t7,$t6 # $t7=$t6[i=j]
	move $t4,$t3 # $t4=$t3[*i=*j]	
	
condwhile:
	beq $t7, $zero, fimwhile # Enquanto o contador $t7 não chegar a zero executa as instruções
	lw $s1,-4($t4) # Carrega $s1 [V[j-1]] da posição $t4 -1 de vetor para a comparação
	slt $t5, ,$s1, $s0 # Enquanto $s1 > que $s0 executar as instruções
	bne $t5, $zero, fimwhile # while ($s1 > $s0) [ while (v[j-1] >pivot ) ]
	
instruwhile:
	sw $s1, ($t4) # Salva $s1 em $t4 [ v[j] = v[j - 1] ] 
	
	subi $t4, $t4, 4 # Decrementa uma posição no ponteiro $t4 [*j--]
	subi $t7, $t7, 1 # Decrementa uma posição no contador $t7 [j--]

loopwhile:
	j condwhile # Retorna para a verificação da condicional do while

fimwhile:
	sw $s0, ($t4) # Salva $s0 em $t4 v[j]=pivot
	
incrementofor:
	addi $t3, $t3, 4 # Incrementa uma posição no ponteiro $t3 [*i++]
	addi $t6, $t6, 1 # Incrementa uma posição no contador $t6 [i++]
	# Fim do incremento do segundo for
	
loopfor:
	j condfor # Retorna para a verificação da condicional do for
fimfor:


# Inicio Impressão
	move $t6, $t0 # Configura o contador $t6 com o valor de $t0
	la $t3,vetor # Recupera o endereço do vetor
	
imprimir:

	lw $a0, ($t3) # Carrega os valores a serem impressos a partir da memória
	addi $v0, $zero, 1 # Imprimir um inteiro carregado da memória
	syscall
	
	addi $t3, $t3, 4 # Acrescenta uma posição na memória
	subi $t6, $t6, 1 # Decrementa uma posição no contador $t6
	
	bne $t6, $zero, imprimir # Caso o contador $t6 ainda não seja zero repete a leitura
	
	# Fim Imprimir
	
sair:
	addi $v0, $zero, 10 # Configura $v0 para 10 para a utilização de syscall
	syscall # Syscall com $v0 igual a 10 termina o programa
